20th April 2024 

AZ-400 

************************
Day 1 - 20th April 2024 
************************

	- Introduction to DevOps 
	
	- Introduction to Azure DevOps Services
	
	
	DevOps ?
	
	SDLC Process ::: Software Development Lifecycle
	
	Software Application :
	
		- Web Applications 
		
		- Mobile Applications 
		
		- Desktop Applications 
		
		- System Software Applications
		
		- Embedded Software Applications
		
			Chip Level Programming 
	
	
	
	Desktop Application ::
	
		- Billing System to a Super-Market
		
			- Functions:
				- Create a user-interface 
				- Create Login Process 
				- Inventory Management 
				- Database Management 
				- Payment - Cash 
					Card Payment

	SDLC Process ::: Software Development Lifecycle:

		1. Requirement Analysis 
		2. Design
		3. Coding - Application Development 
		4. Testing
		5. Implemented to Production 
		6. Monitoring/Maintainence of project
		
	Water-fall Model ::
		- Linear in fashion
		- Top-down Approach
		- It was implemented for tightly coupled application architecture 
			- Monolith Application Architecture
				- tightly coupled application 

		Core_project :
			1. Requirement Analysis 				- 5 functions, 8 Months
			2. Design
			3. Coding - Application Development 	- 4 Month
			4. Testing
			5. Implemented to Production 
			6. Monitoring/Maintainence of project

		Enhancement_project :
			1. Requirement Analysis 				
			2. Design
			3. Coding - Application Development 	
			4. Testing
			5. Implemented to Production 
			6. Monitoring/Maintainence of project
		
		
	AGILE Methodologies :::
	
		The Project/Application will be splitted into various function/modules/Iterations
	
		- Using AGILE Methodologies 
			We can achieve :
			
				- Continuous Development
				- Continuous Integration 
				- Continuous Testing 
				- Continuous Delivery 
					- It is used to release the changes to production environment with manual approvals
					- This expects manual/Approval intervension for Production Releases
					- Expect Downtime during production release
		
			We cannot Achieve :
			
				- Continuous Deployment 
					- This is used to release the changes to Production Environment without any manual approvals	
					- Zero-Downtime during production release.
					
			- Functions:
				- Create a user-interface 
				- Create Login Process 
				- Inventory Management 
				- Database Management 
				- Payment - Cash 
					Card Payment
					
		Iteration1:  Create a user-interface 

			1. Requirement Analysis 				
			2. Design
			3. Coding - Application Development 	
			4. Testing
			5. Implemented to further testing

		Iteration2:  Create Login Process  

			1. Requirement Analysis 				
			2. Design
			3. Coding - Application Development 	
			4. Testing
			5. Implemented to further testing
			

		Iteration - nth:  	Card Payment 

			1. Requirement Analysis 				
			2. Design
			3. Coding - Application Development 	
			4. Testing
			5. Implemented to further testing
		
	DevOps :
		- DevOps is a Software Development Strategy/Process which helps promote the collaboration between the teams like Development Team and Operations Team to achieve Continuous Development, Continuous Integration, Continuous Testing, Continuous Delivery, Continuous Deployment and Continuous Monitoring in a more automated fashion.
		
	How to Implement DevOps ???
	
		Teams:

		DevOps Team :
			- Infra-Structure Management Team 		- Create Infra-Structure & Configure Infra-Structure - IAC 
			- Applications Development Team
			- Testing Team 
			- Release Management Team 
			- Production Support Team 
			- Production Monitoring Team 
			- Security Team 
			
	
		Detailed DevOps Assessment:
		
			- Assessment Report :::
			
				- Choose the DevOps Tools :
			
			
		DevOps Stages :::
		
			- Continuous Development :
				- It is a capability of Development Team to Continuously Develop the Business Application
				- Improve the developers productivity.
				
				- Role of Developer :
				
					Develop Business Application Coding 
					
				1. Coding -- Java / C#.net  High Level Lang.
				2. Application Build  
					- It is process of compiling the source code and create artifacts(Binaries - *.war/*.jar/*.exec/*.dll) 
				3. Perform Unit Testing 
				4. Promote the changes for further testing
				5. Notify the Testing Team thru Email
								
			DevOps Approach:
			
				1. Coding the Application 
				2. Save/Commit the code in the source code repository(github/azure repo)
				
			Thru DevOps Automation (Pipeline):
			
				3. Application Build  
					- It is process of compiling the source code and create artifacts(Binaries - *.war/*.jar/*.exec/*.dll) 
				4. Perform Unit Testing 
				5. Promote the changes for further testing
				6. Notify the Testing Team thru. Email			

			
				Tools:
				
					IDEs - Integrated Development Environment - Eclipse based IDEs, Visual Studio, Visual Studio Code, Pycharm
					git,github/Azure Repos				
			
			- Continuous Integration ::
				- It is a capability of Development Team to Continuously Integrate the changes for further Testing.
			
				Tools:

					IDEs - Integrated Development Environment - Eclipse based IDEs, Visual Studio, Visual Studio Code, Pycharm
					git,github/Azure Repos		
					Azure Pipeline/Jenkins/gitlab-ci

				
			- Continuous Testing ::
			
				- Process of Continuously Test the Changes without impacting others
				
				Testing 
				
					QA  - Quality Assurance Testing 
					UAT - User Acceptance Testing 
				
				Tools :
				
					Azure Pipeline/Jenkins/gitlab-ci
					Selenium/TestNG/Azure Test Service
						- Test Data/Test Scenarios/Cases
			
			- Continuous Delivery / Continuous Deployment
				- Both Continuous Delivery & Deployment are used to perform Production Releases.
			
				- Continuous Delivery 
					- It is used to release the changes to production environment with manual approvals
					- This expects manual/Approval intervension for Production Releases
					- Expect Downtime during production release

					Eg.: 
					Banking Service - Online Banking Service ::
					
						SMS Notifications to customers 
						
						Production Release Window -- Off-Business Hours - Weekends/Early Mornings
							4hrs - 6hrs - Prod level testing 
							
								- If there is any issue during release 
									- Fix the issue.
									- Revert the Changes. 
									
				- Continuous Deployment 
					- This is used to release the changes to Production Environment without any manual approvals	
					- Zero-Downtime during production release.
					
					Eg.: 
					Facebook/Netflix/Google/Amazon
					
				Tools :
				
					Azure Pipeline/Azure-Aritfacts/Jenkins/gitlab-ci	

				Application Architecture :::
				
					- Monolith Application Architecture
							- Tightly coupled application - function/modules
							
					- Micro-Service Based Application Architecture
						- Function/modules are called as Micro-Services
						
				Web-Application - E_Commerce :::
				
				www.amazon.com 
				
				Sign_up			- Micro-Service1 - 3-tier application(Front_End/Appln./Database) - develop,test,promote to prod
				Sign-In 		- Micro-Service2
				Search 
				Add to cart 
				place the order 
				payment 
				confirm
				track
			
			- Continuous Monitoring ::
			
				- Prevent the production downtime
				
				- Infra-Structure Monitoring
					Memory/CPU/Network/Storage/Traffic
					
					Alerts - Azure Monitor/Prometheus/Grafana/Dynatrace 
					
				- Application Monitoring
				
					AppDynamics/DataDog
					
			
			- Infra-Structure Management Team:
			
				- Provision/Create the Infra-Structure	- Terraform/ARM/Cloudformation
				
				- Configure the Infra-Structure			- Ansible/chef/puppet
				
			
		DevOps Lifecycle:
		
			Developer Code 	--> Commit to Src_Code Repo	--> Build --> Unit Testing --> Promoted to QA/UAT --> Promote to Prod 
					|																										|
					|																										|
					|																										|
			   Feedback																						Continuous Monitoring
					|																										|
					|																										|
					|																										|
					---------------------------------------------------------------------------------------------------------	
		
			
		DevOps Tools ::
		
			Open-Source DevOps Tools :
				- github/Jenkins/Docker/Kubernetes/Ansible/Terraform/Prometheus/Grafana/Jira
			
			Managed Services:
				- Azure DevOps Services 
					-- AzBoard/Repos/Pipeline/Test/Artifacts
		
				
		Cloud Platform :

			AWS 
			Microsoft Azure Cloud 
			GCP 
			
			
		DevOps is all about:
		
			- People
			
			- Process
			
			- DevOps Tools 
			
		DevOps Team: 12Members
		
			DevOps Associate / Sr. DA 
			DevOps Engineer / Sr. DE 
			DevOps Lead / Sr. DL 
			DevOps Architect / Sr. D.Archi
			DevOps Consultant / Sr. DC 
			SRE 	
			DevSecOps 
			gitOps 
			AIOps
			MLOps
			
	Next :::

		Working with Azure DevOps Services  $200
		
			Azure Portal Account Creation - free tier Account  -	https://portal.azure.com/signin/index/
				- Email ID 
				- Valid Mobile Number 
				- Credit/Debit Card (Eligible for Internation Transaction)
				
			github account ????
		

************************
Day 2 - 21st April 2024 
************************		

		Working with Azure DevOps Services
		
		Application LifeCycle Management Tool ::::
		
		Jira 
		
		Project Manager / Agile - Scrum Master 
		
		E_Commerce Application ::
		
		Requirement Analysis 
		
		Modules
		
		Resources 
		
		Timeline 
		
		Dependencies
		
			- Containerization 					#Docker 
			
			- Container Orchestration 			#Kubernetes 
			
			
			*.java			- Version Controlled using Az Repos / Github Repos 
			
			*.war 			- Version Controlled using Artifactory Library - Azure Artifacts / Jfrog Artifactory
			
				jdk - 	jdk11 
						jdk17
						
						
			Maven is build tool: 
				- Used to build java applications - automate the build, perform unit testing and create artifacts
				
				
				Application Build  
					- It is process of compiling the source code and create artifacts(Binaries - *.war/*.jar/*.exec/*.dll) 
					
					- Maven is a Java Application Build Tool 
					- Used to build java applications - automate the build, perform unit testing and create artifacts
					
				CICD Pipeline Jenkins/AzPipeline ???	--> Build Orchestration Tool
				
				
				build, UT, Create artifacts, deploy to testing, automated testing, release to prod
				
			
			https://portal.azure.com/signin/index/			
			
			https://aex.dev.azure.com/
			
			Create Organization					# Collection of Azure Projects 	
			
			
			Create Project Contributors / Users at organization level 
			
			Create Project 
			
			
			Active Directory : 
			LDAP
				sso - single sign-on option
				
				rbac - role based access control
				
				
			git/ Github/az Repo # is a distributed VCS:
			
			Repository : Collection of Folders and Files which are version controlled
			
			Branches?
				- Logical copy of a repository(Default branch)
				
				
			Git - Open-source Distributed Version Control System 
				- It is used to version control and track the changes 
				- It is used to perform parallel development using Branches.
			
			master / main branch - default branch. - Production version of source code.
			
			Branching Strategies:
			
				- It is used to maintain the integrity of master branch.
				
			
			Developer's Workload :
			
				- Enhancement_project / Bug_fixing 
				- New Project 
				
				
			Repository :::

Scenario1:			
				master -> rel1,rel2,rel3
				
							rel1,rel2,rel3,f1cm1,f1cm2,f1cm3		# Upon Merging from feature_Branch1
				
					feature_Branch1 - rel1,rel2,rel3,f1cm1,f1cm2,f1cm3
				
Scenario2:			
				master -> rel1,rel2,rel3
				
				
					Developer_Branch1 -- rel1,rel2,rel3
					
										rel1,rel2,rel3,f1cm1,f1cm2,f1cm3,f2cm1,f2cm2,f2cm3					
											
						feature_Branch1 - rel1,rel2,rel3
						
										rel1,rel2,rel3,f1cm1,f1cm2,f1cm3	

						feature_Branch2 - rel1,rel2,rel3			
					
										rel1,rel2,rel3,f2cm1,f2cm2,f2cm3
				
Scenario3:			
				master -> rel1,rel2,rel3
					
					Integration_Branch - rel1,rel2,rel3																# Team1
									rel1,rel2,rel3,Developer_Branch1_Changes,Developer_Branch2_Changes							
				
						Developer_Branch1 -- rel1,rel2,rel3						
											rel1,rel2,rel3,f1cm1,f1cm2,f1cm3,f2cm1,f2cm2,f2cm3					
												
							feature_Branch1 - rel1,rel2,rel3							
											rel1,rel2,rel3,f1cm1,f1cm2,f1cm3	

							feature_Branch2 - rel1,rel2,rel3
											rel1,rel2,rel3,f2cm1,f2cm2,f2cm3
											
						Developer_Branch1 -- rel1,rel2,rel3
											rel1,rel2,rel3,f1cm1,f1cm2,f1cm3,f2cm1,f2cm2,f2cm3					
												
							feature_Branch1 - rel1,rel2,rel3
											rel1,rel2,rel3,f1cm1,f1cm2,f1cm3	

							feature_Branch2 - rel1,rel2,rel3
											rel1,rel2,rel3,f2cm1,f2cm2,f2cm3

Scenario4:		Repo:

				master -> rel1,rel2,rel3
				
								rel1,rel2,rel3,hfc.
				
					hotfix_branch --> rel1,rel2,rel3,hfc1,hfc2,hfc3,
				
							rel1,rel2,rel3,rel4				# rel4 is a combination of Team1&Team2
				
					Release_Branch - rel1,rel2,rel3,hfc,Team1_Changes,Team2_Changes
					
						Integration_Branch1 - rel1,rel2,rel3																# Team1
										rel1,rel2,rel3,Developer_Branch1_Changes,Developer_Branch2_Changes							
					
							Developer_Branch1 -- rel1,rel2,rel3						
												rel1,rel2,rel3,f1cm1,f1cm2,f1cm3,f2cm1,f2cm2,f2cm3					
													
								feature_Branch1 - rel1,rel2,rel3							
												rel1,rel2,rel3,f1cm1,f1cm2,f1cm3	

								feature_Branch2 - rel1,rel2,rel3
												rel1,rel2,rel3,f2cm1,f2cm2,f2cm3
												
							Developer_Branch1 -- rel1,rel2,rel3
												rel1,rel2,rel3,f1cm1,f1cm2,f1cm3,f2cm1,f2cm2,f2cm3					
													
								feature_Branch1 - rel1,rel2,rel3
												rel1,rel2,rel3,f1cm1,f1cm2,f1cm3	

								feature_Branch2 - rel1,rel2,rel3
												rel1,rel2,rel3,f2cm1,f2cm2,f2cm3

						Integration_Branch2 - rel1,rel2,rel3																# Team2
										rel1,rel2,rel3,Developer_Branch1_Changes,Developer_Branch2_Changes							
					
							Developer_Branch1 -- rel1,rel2,rel3						
												rel1,rel2,rel3,f1cm1,f1cm2,f1cm3,f2cm1,f2cm2,f2cm3					
													
								feature_Branch1 - rel1,rel2,rel3							
												rel1,rel2,rel3,f1cm1,f1cm2,f1cm3	

								feature_Branch2 - rel1,rel2,rel3
												rel1,rel2,rel3,f2cm1,f2cm2,f2cm3
												
							Developer_Branch1 -- rel1,rel2,rel3
												rel1,rel2,rel3,f1cm1,f1cm2,f1cm3,f2cm1,f2cm2,f2cm3					
													
								feature_Branch1 - rel1,rel2,rel3
												rel1,rel2,rel3,f1cm1,f1cm2,f1cm3	

								feature_Branch2 - rel1,rel2,rel3
												rel1,rel2,rel3,f2cm1,f2cm2,f2cm3
												
		
		
	
	Environment:  Web_Site 
	
		Non-Prod Environment														Production Environment
		
			Dev_Environment
			Build_Environment (Unit Testing)
			
			Test 
				QA 	- Quality Assurance Testing 
				UAT	- User Acceptance Testing				=======>						Prod_Environments
				
				
	Domain - Tele-comm Domain:
	
		- SP1 --> New Offer to their Customer --> outlets only.(Business User) == Website 
		
		
		
		Continuous Development ::	
		
			IDEs - Visual Studio Code access -  az repo.
			
			Install Visual Studio Code 		https://code.visualstudio.com/download
			
			
			https://github.com/LoksaiETA/Java-mvn-app2
		
************************
Day 3 - 27th April 2024 
************************

	Azure DevOps --> 5 Services 

	Azure Boards 
	
	Azure Repo
	
	Azure Pipelines 
		- Build Pipelines 
		- Release 
		
	
	Implementation :
	
	Problem Statement :
	
		Using Azure DevOps Services on DevOps Teams' Perspective :
		
		DevOps Lead/Architect/Consultant :::
		
			Requirement to Implement DevOps to one of the Clients:
			
			
	1. Detailed DevOps Assessment 
	
	2. Onboard the Applications 
		
		- Create Project Repo and CICD Pipeline to Build and Deploy Java Web Application 
			
		- Create Project Repo and CICD Pipeline to Build and Deploy .Net Web Application 
		
	3. Periodic Enhancement/Upgrade of DevOps Process and Pipeline Scripts

		- Implement the Containerization using Docker & Kubernetes

	4. Automate Infra-Structure Provisioning 
	
	Application/Project Lifecycle Management Tool:  - ALM 
	
	- Azure Boards :::
	
		Process used to Create Azure Project :
		
		
		EPIC : DevOps Implementation																	# Epic(Parent to User Stories)	

				1. Detailed DevOps Assessment 															# User Stories(Child to Epic)
				
				2. Onboard the Applications 
					
					- Create Project Repo and CICD Pipeline to Build and Deploy Java Web Application 	
						
					- Create Project Repo and CICD Pipeline to Build and Deploy .Net Web Application 
					
				3. Periodic Enhancement/Upgrade of DevOps Process and Pipeline Scripts

					- Implement the Containerization using Docker & Kubernetes

				4. Automate Infra-Structure Provisioning 
		
		
		Basic Project Process:
		
			EPIC	
				issue1
					task1
					task2
				issue2
					task 
					
		Agile Project Process:
		
			EPIC 
				Feature - Q1
					UserStory1	
						task1
						task2
						bug2						
					UserStory2
				Feature - Q2
					UserStory1 
					UserStory2				

		SCRUM Project Process:
		
			EPIC 
				Feature - Q1
					Product Backlog Item1	
						task1
						task2
						bug2						
					Product Backlog Item2
				Feature - Q2
					Product Backlog Item1
					Product Backlog Item2				
					
					
	
	Azure Repo :::
	
		Import github Repo
		
		- Create a local repository
		
		- Push the repo to Azure Remote Repository
		
		
		Install IDE - Visual Studio Code 
		
		Install git in the local Machine
		
			git cli in local machine 			# https://git-scm.com/downloads
			
			1. Create a local Repository using GIT CLi 
			
			2. Publish this repo to remote Azure Repo 
			
			3. Azure Repo. 
				Branches
				Pull Request 
				Merge 
				Repo Related Administration
				
		
		Misc Git Topics :::
		
		
			- git file Workflow 
			
			- git installation 
			
			- Create Local Repository 

			- .gitignore
			
			- Misc. git command 		
			
			- Working with git config 
			
			- Working with undo - unstage 
			
			- Undo Commits - git reset / git revert 
			
			- Git Branches 
			
			- Branch creation
			
			- Merge 
			
			- Handle Merge Conflicts 
			
			- Rebase / squash 
			
			- Handle Local and Repositories 
	
	
	Enhancement/Bugfix 
	
	New Project 
			
	git remote add origin https://lgeet124@dev.azure.com/lgeet124/Edu-DevOps-Project/_git/Edu-DevOps-Project
	git push -u origin --all
	
	
	fork 
	
	import 
	
	
	Branching strategies :
	
		AzRepo is the target (master branch)  
		
			feature branch 
			
			github connection
		
		
		
		
		Local Repo:
		
			master 
			
				feature1
				
				git rebase master 	# it is used to bring the incremental changes from local master branch to local feature branch
				
				git pull 			# it is used to bring the incremental changes from remote repo branch to local repo branch
